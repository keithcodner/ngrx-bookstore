proposed video cart model example:

{
    cartID:"1234-5678-6778-3214",
    videoCartCollection: {
        {
            {
                id: 0,
                video_title: "video 1",
                creator: "",
                description: "",
                img_path: "",
                length: 0,
                cost: 0
            },
            {
                quantity: 2,
                total: 0
            }
        },
        {
            {
                id: 0,
                video_title: "video 1",
                creator: "",
                description: "",
                img_path: "",
                length: 0,
                cost: 0
            },
            {
                quantity: 1,
                total: 0
            }
        }
    }
}


----------Current Cart structure Example-----------

{
    id: 0,
    video_title: "video 1",
    creator: "",
    description: "",
    img_path: "",
    length: 0,
    cost: 0
},
{
    id: 0,
    video_title: "video 2",
    creator: "",
    description: "",
    img_path: "",
    length: 0,
    cost: 0
},



----------START SERVERS NGRX VIDEO CATELOG-----------

- start express server: 'node index.js' in the directory of  src
- start web server: ng serve -o in the directory of  src




----------NOTES-----------
 addToCart(id:number){

    let selectedAvailableVideo$ = this.store.pipe(select(selectVideoById(id)));

    selectedAvailableVideo$.subscribe((data) => {
      if(data){

        let queryCartVideoData$ = this.store.pipe(select(selectCartVideoById(data.id)));

        let videoCartItemDefault:VideoCartItems = {
          id: crypto.randomUUID(),
          video_id: data.id,
          numberOfItems: 1,
          totalPrice: data.cost,
          video: data // is of type Video, like in interface
        }

        //this part makes it so that if the same item is added to the cart multiple times, the quantity of the existing object is updated instead of another of the same object being added
        queryCartVideoData$.subscribe((data2) => {

          console.log('data2: ' + data2?.video_id);
          console.log('data: ' +data.id);

          if(data2?.video_id == undefined){
            this.store.dispatch(invokeAddVideoToVideoCart({ video: videoCartItemDefault }))
            this.addToCartToastTrigger();
          }else{
            if(data.id === data2?.video_id){

              let newQty = data2.numberOfItems++;
              let videoCartItemUpdated:VideoCartItems = {
                ...data2,
              }
  
              console.log(videoCartItemUpdated);
  
              this.store.dispatch(invokeUpdateVideoToVideoCartQuantity({ video: videoCartItemUpdated }))
              this.addToCartToastTrigger();
            }else{
              this.store.dispatch(invokeAddVideoToVideoCart({ video: videoCartItemDefault }))
              this.addToCartToastTrigger();
            }
          }

          
        });
        
        
      }
    });
  }

