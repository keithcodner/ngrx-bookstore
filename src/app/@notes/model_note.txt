proposed video cart model example:

{
    cartID:"1234-5678-6778-3214",
    videoCartCollection: {
        {
            {
                id: 0,
                video_title: "video 1",
                creator: "",
                description: "",
                img_path: "",
                length: 0,
                cost: 0
            },
            {
                quantity: 2,
                total: 0
            }
        },
        {
            {
                id: 0,
                video_title: "video 1",
                creator: "",
                description: "",
                img_path: "",
                length: 0,
                cost: 0
            },
            {
                quantity: 1,
                total: 0
            }
        }
    }
}


----------Current Cart structure Example-----------

{
    id: 0,
    video_title: "video 1",
    creator: "",
    description: "",
    img_path: "",
    length: 0,
    cost: 0
},
{
    id: 0,
    video_title: "video 2",
    creator: "",
    description: "",
    img_path: "",
    length: 0,
    cost: 0
},



----------START SERVERS NGRX VIDEO CATELOG-----------

- start express server: '
' in the directory of  src: node index.js
- start web server: ng serve -o in the directory of  src




----------NOTES-----------
 addToCart(id:number){

    let selectedAvailableVideo$ = this.store.pipe(select(selectVideoById(id)));

    selectedAvailableVideo$.subscribe((data) => {
      if(data){

        let queryCartVideoData$ = this.store.pipe(select(selectCartVideoById(data.id)));

        let videoCartItemDefault:VideoCartItems = {
          id: crypto.randomUUID(),
          video_id: data.id,
          numberOfItems: 1,
          totalPrice: data.cost,
          video: data // is of type Video, like in interface
        }

        //this part makes it so that if the same item is added to the cart multiple times, the quantity of the existing object is updated instead of another of the same object being added
        queryCartVideoData$.subscribe((data2) => {

          console.log('data2: ' + data2?.video_id);
          console.log('data: ' +data.id);

          if(data2?.video_id == undefined){
            this.store.dispatch(invokeAddVideoToVideoCart({ video: videoCartItemDefault }))
            this.addToCartToastTrigger();
          }else{
            if(data.id === data2?.video_id){

              let newQty = data2.numberOfItems++;
              let videoCartItemUpdated:VideoCartItems = {
                ...data2,
              }
  
              console.log(videoCartItemUpdated);
  
              this.store.dispatch(invokeUpdateVideoToVideoCartQuantity({ video: videoCartItemUpdated }))
              this.addToCartToastTrigger();
            }else{
              this.store.dispatch(invokeAddVideoToVideoCart({ video: videoCartItemDefault }))
              this.addToCartToastTrigger();
            }
          }

          
        });
        
        
      }
    });
  }



  ----------NOTES 2-----------
  addToCart(id:number){

    let selectedAvailableVideo$ = this.store.pipe(select(selectVideoById(id)));
    let currenAddVideoID:number = 0;

    selectedAvailableVideo$.subscribe((data) => {
      if(data){

        let videoCartItem:VideoCartItems = {
          id: crypto.randomUUID(),
          video_id: data.id,
          numberOfItems: 1,
          totalPrice: data.cost,
          video: data // is of type Video, like in interface
        }

        currenAddVideoID = data.id;

        this.store.dispatch(invokeAddVideoToVideoCart({ video: videoCartItem }))
        this.addToCartToastTrigger();
      }
    });

    let queryCartVideoData$ = this.store.pipe(select(selectCartVideoById(currenAddVideoID)));

    //this part makes it so that if the same item is added to the cart multiple times, the quantity of the existing object is updated instead of another of the same object being added
    queryCartVideoData$.subscribe((data2) => {
      if(data.id == data2?.video.id){
        this.store.dispatch(invokeUpdateVideoToVideoCartQuantity({ video: videoCartItem }))
        this.addToCartToastTrigger();
      }else{
        
      }
    });


  }


--------------------------------------------------
//mergeMap - allows you to combine two observables, the inner observable is used first, and then the outer observable (everything all at once)
//switchMap - allows you run a new observable, while getting rid of the old one (one at a time, waiting for the old observable to be gone before starting a new one)- so essential you are switching the map
of(1, 2, 3, 4) // emits a stream of variables with go in the order of numbers
let a = [1, 2]
let b = a.map(x => x * 2); // will multiple each value by 2

// will print each number and add 10
of(1, 2, 3, 4).pipe(map((v) => v + 10)).subscribe(console.log)

// merge allows you merge the two observables and which ever it gets to the one first, it will emit firstlet 
sourc1$ = interval(1000).pipe(map((val) => 'value from source 1' + val), take(5));
let sourc2$ = interval(500).pipe(map((val) => 'value from source 1' + val), take(5));
merge(sourc1$, sourc2$).subscribe((data) => {
    console.log(data);
})
pipe = what you tell it to do ie.filtersubscribe = is the result of what it will do ie.a command, like print to console or do an action


//mergeAll will take the count from the outer observable, but display the data from the inner observable 
sourc1$.pipe(map((val) => sourc2$), mergeAll()).subscribe((data) => {
  console.log(data)
})

//mergeMap does the same thing as about but withoutmergeAll
sourc1$.pipe(mapMap((val) => sourc2$)).subscribe((data) => {
  console.log(data)
})

//switchMap// this loops through via an interval through ids up to 5 And so, because the interval is very quickthe switchMap will cancel the first 4 requests and emit the last request because it switches to the nextinterval and cancels anything else
let postIds = interval(1).pipe(filter((val) => val > 0), 
                               take(5) // prints only the first 5        );
                               postIds.pipe(switchMap((id) => {
  return this.http.get(`https://jsonplaceholder.typicode.com/posts/${id}`);
})).subscribe((postDetails) => {
  console.log(postDetails)
})


import { filter as _filter, find, minBy, sortBy, keyBy, mapValues, cloneDeep } from 'lodash';
import { asyncScheduler, combineLatest, forkJoin, interval, merge, Observable, of, race, Subscription } from 'rxjs';
import { debounceTime, filter, first, map, mergeMap, pairwise,skip, startWith, switchMap, takeWhile, tap, take, skipWhile, distinctUntilChanged, observeOn } from 'rxjs/operators';



// each time you use map, you loop down each hierarchy in the object/shape
    const grandTotal$ = this.cartVideosTotalPrice$.pipe(
      map(
        x => x.reduce((acc, val) => {
          console.log('Accum: ' + Number(acc));
          console.log('val: ' +  Number(val.totalPrice));
          console.log('-------------------------------------------- ID: ' + val.video_id);
          let data:number = Number(acc) + +Number(val.totalPrice);
          return data
        }, 0).toFixed(2)
      )
      // map(
      //   (data:VideoCartItems[]) => data.map(
      //     (value: VideoCartItems) => {
      //       return value.totalPrice
      //     })
      //   )
    );
    
    grandTotal$.subscribe((data) => this.htmlGrandTotal =  Number(data);
  }


--------------------------default service function---------------------------

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CartCountItems, Order, Transaction, User, UserLogin, Video, VideoCartItems } from './store/video';
import { combineLatest, count, first, forkJoin, map, merge, mergeAll, Observable, of, reduce, switchMap, take } from 'rxjs';
import { selectCartVideos } from './store/videos.selector';
import { invokeVideoCartFetch } from './store/videos.action';
import { Store, select, MemoizedSelector, DefaultProjectorFn } from '@ngrx/store';
import { selectUser } from './store/login/login.selector';
import { ActivatedRoute, Router } from '@angular/router';
import { Appstate } from '../shared/store/appstate';

@Injectable({
  providedIn: 'root'
})
export class VideosService {

  constructor(
    private store:Store, 
    private http:HttpClient,
    private route:ActivatedRoute,
    private router:Router,
    private appStore:Store<Appstate>,
  ) { }

  //----------------------  Home Endpoints ----------------------
  get(){
    return this.http.get<Video[]>("http://localhost:3000/videos");
  }

  saveVideo(payload:Video){
    return this.http.post<Video>("http://localhost:3000/videos", payload);
  }

  update(payload:Video){
    return this.http.put<Video>(`http://localhost:3000/videos/${payload.id}`, payload);
  }

  delete(id:number){
    return this.http.delete(`http://localhost:3000/videos/${id}`);
  }

  //---------------------- Auth End points ----------------------
  login(payload:UserLogin){
    return this.http.post<User>(`http://localhost:3000/auth`, payload);
  }

  //---------------------- Cart End points ----------------------

  //---------------------- Checkout Endpoints ----------------------

  //---------------------- Checkout Endpoints ----------------------
  getAllTransaction(){
    return this.http.get<Transaction[]>("http://localhost:3000/transaction");
  }

  getTransactionsById(id:any){
    return this.http.post<Transaction[]>(`http://localhost:3000/transactionById/`, id);
  }

  saveTransaction(payload:Video){
    return this.http.post<Video>("http://localhost:3000/transaction", payload);
  }

  //---------------------- Order Endpoints ----------------------
  getAllOrder(){
    return this.http.get<Order[]>("http://localhost:3000/order");
  }

  getOrderById(id:any){
    return this.http.post<Order[]>("http://localhost:3000/orderById", id);
  }

  saveOrder(payload:Order){
    return this.http.post<Order>("http://localhost:3000/order", payload);
  }

  //---------------------- Functions----------------------
  updateMainGrandTotal(
    selectCartVideos:MemoizedSelector<object, VideoCartItems[], DefaultProjectorFn<VideoCartItems[]>> 
  ):Observable<CartCountItems>{
    let cartVideosTotalPrice$ = this.store.pipe(select(selectCartVideos));

    let totalCartItemLength = 0;
    let grandTotalValue = 0 ;
    
    // each time you use map, you loop down each hierarchy in the object/shape
    let grandTotal$ = cartVideosTotalPrice$.pipe(
      map(videoCart => videoCart.reduce((acc, val) => {
          let sub_total = (Number(val.video.cost) * Number(val.numberOfItems));
          let data:number = Number(acc) + sub_total;
          return data;
        }, 0).toFixed(2) //tofix makes it 2 decimals
      )
    );

    //get cart count
    let cartCount$ = cartVideosTotalPrice$.pipe(map(videoCartItem =>  {
        return videoCartItem.length;
      })
    );

    //action the grand total
    grandTotal$.subscribe((data) => {
      this.htmlGrandTotal$.subscribe((total) => {
        console.log(Number(data));
        return total.value = Number(data);
      })
    });

    //action keep count of cart items
    cartCount$.subscribe((data) => {
      this.htmlCartCount$.subscribe((count) => {
        return count.value = Number(data);
      })
    });

    let cartCountItem: CartCountItems = {
      cartCount: 0,
      cart:0,
      cartGrandTotal:0,
    };

    return of(cartCountItem);

  }
}
